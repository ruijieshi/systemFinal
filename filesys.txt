+-------------------------+
|      CS 5600           |
| PROJECT 4: FILE SYSTEMS |
|     DESIGN DOCUMENT     |
+-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

FirstName LastName <email@domain.example>
Yinglao Liu <liu.yingl@husky.neu.edu>
FirstName LastName <email@domain.example>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

INDEXED AND EXTENSIBLE FILES
============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In struct indoe and inode_disk:
 
    off_t read_length;             // In memory inode only, needed for extend-read
    size_t direct_index;       //The direct block pointer index
    size_t indirect_index;    //The indirect block pointer index
    size_t double_indirect_index;  //The double indirect pointer index
    bool isdir;         //whether it is a dir or not
    block_sector_t parent;   // parent block
    struct lock lock;           //lock for synchronization
    block_sector_t ptr[INODE_BLOCK_PTRS_SIZE];  // Pointers to blocks 
  
In struct indirect_block // Used for indirect and doubly indirect block
  {
    block_sector_t ptr[INDIRECT_BLOCK_PTRS]; // Pointers to blocks
  };

>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.

 We use 4 direct inodes, 9 indirect inodes, and 1 double indirect inode, 
 which gives 4 blocks of 512 bytes (2048 bytes), 9 * 128 blocks of 512 (589,824 bytes), 
 and 128 * 128 blocks of 512 (8,388,608 bytes). 
 The maximum file size is 8,980,480 bytes (~8 MB).

---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.

When a process tries to extend a file, it will first lock it and
parent inode so only one thread will writing to a file at one time.

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.

The write operation would modify the length variable of the file right before
it completes.Therefore, before it completes, the read operation will only read 
the "old" length and not read the extended part.

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.

This is not fully completed in this assignment. But theoretically, we 
could set the length vairable after the file is written and use lock to 
atomize the operations.


---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?

Our current design is very conventional and ends up getting to the exact
file size required. The 4 direct pointers aim to cover 2KB files, the 
9 indirect pointers covers smaller files and one additional
double indirect pointer which covers the large files.

SUBDIRECTORIES
==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

BUFFER CACHE
============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.

>> C3: Describe your implementation of write-behind.

>> C4: Describe your implementation of read-ahead.

---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?

>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?

---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.

